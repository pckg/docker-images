server {
    listen 80 default_server;
    listen [::]:80 default_server;
    fastcgi_hide_header Set-Cookie;

    # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;

    # Server domains
    # server_name domain.com;
    server_name _;

    # Document root
    root /var/www/html/;

    # SSL config
    ssl_certificate     /etc/ssl/certs/apache-selfsigned.crt;
    ssl_certificate_key /etc/ssl/certs/apache-selfsigned.key;

    # Cookie-less static domain
    fastcgi_hide_header Set-Cookie;

    # Optimize session
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # Optimize SSL
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
    ssl_prefer_server_ciphers on;

    #ssl_protocols TLSv1.2;
    #ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    #ssl_prefer_server_ciphers on;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    add_header Strict-Transport-Security "max-age=15768000; preload; includeSubDomains" always;

    # OCSP Stapling ---
    # fetch OCSP records from URL in ssl_certificate and cache them
    ssl_stapling on;
    ssl_stapling_verify on;

    # Because nginx will serve only specific file types we disable access.
    location / {
        deny all;
    }

    # Healthcheck?
    location /robots.txt {
        return 200 'User-Agent: *\nDisallow: ';
        add_header Content-Type text/plain;
    }

    # Nginx will serve only files from ./htdocs/storage/ directory.
    # We deny all by default and allow only static files.
    location /storage/ {
        deny all;

        location ~* "\.(jpg|jpeg|gif|png|webp|css|js|ico|ttf|woff|woff2|otf)$" {
            allow all;
            expires 1M;
            access_log off;
            add_header Cache-Control "public, max-age=2592000";
            add_header Access-Control-Allow-Origin *;

            try_files $uri =404;
        }

        return 403;
    }

    location /build/ {
        deny all;

        location ~* "\.(jpg|jpeg|gif|png|webp|css|js|ico|ttf|woff|woff2|otf)$" {
            allow all;
            expires 1M;
            access_log off;
            add_header Cache-Control "public, max-age=2592000";
            add_header Access-Control-Allow-Origin *;

            try_files $uri =404;
        }

        return 403;
    }

}
